WebDriver - API для управления поведением браузера
Каждый браузер поддерживается определенной реализацией Драйвера (Chromedriver)
Driver - компонент/сущность отвечающая за делегирование полномочий браузеру
Драйвер обеспечивает обмен данными между Selenium и браузером
Selenium - фреймворк, связывающий все эти части вместе при помощи пользовательского интерфейса - кода на Python, Java и других языках программирования
Позволяет использовать все части браузера, обеспечивая кросс-браузерную и кросс-платформенную автоматизацию действий в браузере

1. Selenium + WebDriver > 2. Driver (Chromedriver) > 3. Browser > 4. Driver > 5. Selenium + Webdriver
1. Описываются действия для управления браузером при помощи языка программирования (открой ссылку, нажми на кнопку и тд)
2. Этот код передается Драйверу
3. Драйвер передает все эти действия Браузеру
Браузер выполняет описанные действия и возвращает результат обратно Драйверу
4. Драйвер получает результат выполненых действий и передает их в Selenium
5. В Селениум выполняются нужные действия

Создаем новый проект
Создает виртуальное окружение: python3 -m venv venv
В результате, в корневой директории проекта появится папка venv
Затем нужно активировать виртуальное окружение: venv/Scripts/activate.ps1 (on Windows), source venv/bin/activate (for MacOS)
После этого, в терминале, в начале строки, появится (venv), это будет означать, что окружение активировано
Далее нужно установить Selenium и WebDriver manager: pip3 install selenium webdriver-manager
Webdriver manager позволяет автоматически скачивать и устанавливать самую новую версию Драйвера для того или иного браузера без скачивания и замены бинарных файлов в проектах
После этого можно создать новый Пайтон файл для написания кода
В него нужно импортировать Вебдрайвер
from selenium import webdriver
Потом из webdriver-manager импортируем необходимый драйвер, в зависимости от нужного браузера (Chrome - chromedriver)
from webdriver_manager.chrome import ChromeDriverManager
Так же нужно импортировать класс Service, который появился в Selenium 4
Он отвечает за установку, открытие и закрытие Драйвера
from selenium.webdriver.chrome.service import Service

В Selenium 4 инициализация Драйвера происходит через обьект класса Service
service = Service(executable_path=ChromeDriverManager().install()) # Обьект класса Service
executable_path - путь к нашему Драйверу, а так как у нас используются не .bin файлы, а DriverManager, указывается путь к его методу install
Это метод установит Драйвер и передаст путь к нему в Service
Затем инициализируется сам Драйвер
driver = webdriver.Chrome(service=service)
Теперь можно запустить программу - будет открыт и закрыт Хром браузер
Закрывается он автоматически благодаря Service, который отвечает за его закрытие, driver.quit() теперь не нужно указывать

Драйвер Firefox создается по аналогичной схеме
from selenium import webdriver
from webdriver_manager.firefox import GeckoDriverManager
from selenium.webdriver.firefox.service import Service

service = Service(executable_path=GeckoDriverManager().install())
driver = webdriver.Firefox(serivce=service)

Управление кнопками браузера
driver.forward() - кнопка браузера Вперед
driver.back() - кнопка браузера Назад
driver.refresh() - кнопка браузера Перезагрузить страницу

Получение данных страницы
driver.current_url - текущий урл страницы
driver.title - заголовок текущей страницы
driver.page_source - исходный код страницы

Валидировать данные можно при помощи условия assert
После запятой можно указать сообщение, которое будет выведено в случает неудачи
assert url == 'https://www.motorsport.com/', 'Invalid URL'


find.element() - метод для поиска элементов на странице
В качестве аргументов он принимает:
1. метод поиска: по xpath, class name, css селектору, id
2. значение локатора, по которому находится веб-элелемент
driver.find_element('xpath', '/html/body/rz-app-root/div/div[1]/rz-main-header/header/div/div/button[1]')
Методы поиска: "id", "xpath", "name", "class name", "css selector"

Так же, искать элементы можно при помощи класса By импортируемого из selenium
Но для этого в каждом файле нужно его импортировать, что не очень удобно
from selenium.webdriver.common.by import By
driver.find_element(By.XPATH, '/html/body/rz-app-root/div/div[1]/rz-main-header/header/div/div/button[1]')

С точки зрения веб-приложения, веб элемент - это любой элемент на странице
В Селениум, веб-элемент - это тип данных, обьект класса WebElement
driver.get('https://rozetka.com.ua/ua/')
button = driver.find_element('xpath', '/html/body/rz-app-root/div/div[1]/rz-main-header/header/div/div/button[1]')
print(type(button)) # <class 'selenium.webdriver.remote.webelement.WebElement'>

find_elements() - возвращает список элементов у которых одинаковое значение переданного локатора
Так как это список, обращаться к его элементам можно по индексу
Например, если несколько элементов на странице имеют одинаковый class name или id, все их можно получить
titles_list = driver.find_elements('class name', 'title') # [<selenium.webdriver.remote.webelement.WebElement (session="dfb302d11ee9c83fc441db462e5da5b0", element="f.D70249E009AB57F28B2CCACB2B319D5D.d.EC3100381E02A306C64042C8F171B949.e.153")>,
<selenium.webdriver.remote.webelement.WebElement (session="dfb302d11ee9c83fc441db462e5da5b0", element="f.D70249E009AB57F28B2CCACB2B319D5D.d.EC3100381E02A306C64042C8F171B949.e.154")>, ...,
<selenium.webdriver.remote.webelement.WebElement (session="dfb302d11ee9c83fc441db462e5da5b0", element="f.D70249E009AB57F28B2CCACB2B319D5D.d.EC3100381E02A306C64042C8F171B949.e.176")>]
titles_list[1] # <selenium.webdriver.remote.webelement.WebElement (session="dfb302d11ee9c83fc441db462e5da5b0", element="f.D70249E009AB57F28B2CCACB2B319D5D.d.EC3100381E02A306C64042C8F171B949.e.154")>

XPath (XML path language) - язык запросов к элементам XML, HTML документов
В XPath используются символы /, //, а так же теги
XPath всегда начинается с / или //
/ - означает прямого потомка, аналогичен символу > в CSS-селекторах
html, body, div, span, h1 - в такой структуре span - прямой потомок div, div/span
// - означает потомка любого уровня вложенности
// используется для глобального поиска от корня документа или внутри других тегов
html, body, div, span, h1 - в такой структуре путь к span можно указать как: //span (от корня документа) или html//span (глобальный поиск внутри html тега)
//div[5] - div который в структуре находится на 5-ом уровне вложенности
(//div)[5] ???
При использовании глобального поиска, в случае изменения меторасположения веб-элемента в структуре дерева, в большинтсве случаев XPath не сломается

К тегам относятся все HTML теги: head, body, div, span, input, h3 и т.д.
Теги могут иметь аттрибуты, один или несколько
К ним относятся: class, id, type, placeholder
Аттрибуты можно использовать для формирования XPath
В XPath аттрибуты указываются в квадратных скобках после тегов
Перед аттрибутом ставится символ @, после названия аттрибута символ = и значение этого аттрибута в кавычках
button[@class='submit'], button - HTML тег, у которого есть аттрибут class, значение которого submit
Исключением является тег text, он указывается без символа @, но с круглыми скобками () - //span[text()='Супер! Дякую']
Например, если в дереве несколько полей ввода, можно указать аттрибут нужного поля, который уникален для него
//input[@type='email'] - у тега input есть аттрибут type, значение которого email и такого значения у аттрибута type нет у других тегов input

Аттрибуты могут имееть значения, которые содержат несколько названий, например class='style-scope ytd-app', содержит style-scope и ytd-app
Что бы не указывать их все, можно воспользоваться методом contains() и передать ему одно из значений аттрибута
contains() указывается после тега, в квадртаных скобках, как аттрибут, но без символа @ и принимает 2 аргумента: название аттрибута с символом @ и его значение в скобках
//div[contains(@class, 'ytd-app')]

Если нужно найти тег, у которого несколько аттрибутов - они перечисляются с помощью оператора and
Тег a имеет аттрибуты class='ms-item ms-item-hor-d ms-item-hor-t ms-item-hor-m', data-entity-id='10700419', data-entity-type='article'
//a[@data-entity-id='10700419' and @data-entity-type='article']

send_keys() - заполняет поле ввода значением, которое принимает в качестве аргумента
input_field.send_keys('test_email@gmail.com') - введет в поле ввода текст test_email@gmail.com
clear() - очищает поле ввода

get_attribute() - возвращает аттрибутов веб-элементов к которым применяется
В качестве аргумента принимает название нужного аттрибута:
value - значение/текст в поле ввода
maxlength - максимально допустимая длина текста в поле ввода
input_field.get_attribute("value") # test_email@gmail.com

webdriver.ChromeOptions() - опции браузера (в данном примере Chrome)
К опциям браузера относятся:
incognito - открытие в режиме инкогнито
window-size=1280,780 - с заданными размерами окна
headless - запуск браузера без графического интерфейса (в фоне, что требует меньшего количества ресурсов)
ignore-certificate-errors - игнорирование любых ошибок связанных с SSL-сертификатами (отсутствует, истек и т.д.)
disable_cache - отключение записи кеша
add_argument() - добавить опцию, что бы она выполнялась при запуске тестов
В качестве аргументов передаются названия опций с 2 тире в начале
chrome_options = webdriver.ChromeOptions()
chrome_options.add_argument("--incognito")
Для того, что бы опции выполнялись - их нужно передать в Драйвер, при его инициализации, в качестве аргумента
Поэтому создание и добавление опций должно быть указано до строки с созданием Драйвера

driver.set_window_size(320, 660) - задать размеры окна браузера
Минус этого варианта в том, что он выполняется уже после инициализации драйвера
Поэтому браузер сначала открывается со стандартными размерами окна, а затем изменяех их на указанные в этом методе

Стратегия загрузки страницы - описывает момент когда Селениум начинает выполнять действия на странице
Возможные варианты: когда на странице загрузились все ресурсы, или когда загрузился только ДОМ, ожидание/отсуствие ожидания загрузки всех картинок
В Селениум есть 3 стратегии загрузки страницы:
normal (используется по умолчанию) - ожидает загрузки всех ресурсов на странице
eager - ожидает загрузки только ДОМ дерева
none - ничего не ожидает ?
Стратегия загрузки страницы задана в Опциях браузера
chrome_options.page_load_strategy = 'eager'

options - стандартные настройки браузера
prefs - специфические настройки: пути, директория для скачивания файлов и другие
Для изменения специфических настроек - их и их значения нужно указать в словаре prefs
А затем добавить словарь prefs со всеми нужными специфическими настройками в options при помощи метода add_experimental_option()
Слово "prefs" в add_experimental_option методе является зарезирвированным
download.default_directory - специфическая настройка браузера, указывает на папку куда нужно загружать файлы
Для указания пути к папке/файлу можно использовать модуль os, его метод getcws() указывает на текущую директорию
prefs = {
    "download.default_directory": f"{os.getcwd()}"
    # "download.default_directory": f"{os.getcwd()}/folder_for_files" # Папка в текущей директории
    # "download.default_directory": f"{os.getcwd()}\\folder_for_files" # Или обратный слеш ?
}
options.add_experimental_option("prefs", prefs)

Веб-элементы для загрузки файлов являются input-полями с type='file'
Поэтому, для того, что бы отправить в них файл - нужно использовать метод send_keys(), а в качестве аргумента передать путь к нужному файлу
upload.field = driver.find_element('xpath', "//input[@type='file']")
upload.field.send_keys(f"{os.getcwd()/files/image_fo_upload.jpg}") # Путь к файлу image_fo_upload.jpg в папке files в текущей директории
Если загрузка файлов реализована на фронтенде через button, то там все равно будет input c type='file' просто он будет скрытым

Ожидания используются для опроса страницы о наличии веб-элемента в течении некоторого времени
Они применяются, в основном, к find_element и find_elements
Ожидания бывают неявные и явные

Неявные ожидания (implicit wait) - это количество времени в течении которого Вебдрайвер будет проверять страницу на наличие веб-элемента при помощи find_element и find_elements
Если элемент будет найден раньше указанного времени - ожидание завершится раньше
Неявное ожидание задается один раз для всего модуля и применяется для каждого find_element и find_elements в нем
driver.implicitly_wait(10) - в качестве аргумента принимает количество времени в секундах

Явное ожидание (explicit wait) ожидает выполнение определенного действия (появления на сранице, изменение цвета и тд), изменения состояния определенного веб-элемента
Оно указывается к конкретному веб-элементу, отдельно для каждого из них
Для использования явного ожидания нужно сделать 2 импорта:
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions
И создать обьект wait, который и отвечает за явное ожидание
Этот обьект является инстантом класса WebDriverWait и принимает 3 аргумента:
1. driver
2. Время, в течении которого Драйвер будет ожидать выполнения явного условия
3. pool_frequency (не обязательный) - частота, с которой проверяется страница на наличие условия
wait = WebDriverWait(driver, 15, poll_frequency=1)
Обьект wait имеет метод until, для ожидания явного условия expected_conditions
Если веб-элемент был найден - этот метод возвращает его

expected_conditions - имеет список доступных условий:
visibility_of_element_located - элемент виден на странице (его высота и ширина больше ноля)
element_to_be_clickable - элемент кликабельный
invisibility_of_element_located - отсутствие єлемента на странице
Эти методы в качестве аргумента принимают кортеж из 2 элементов: метод поиска веб-элемента на странице и его локатор (внутри метода кортеж будет распакован на элементы)
text_to_be_present_in_element_value - проверяет что в элементе находится нужный текст
Данный метод принимает 2 аргумента: кортеж из метода поиска и локатора, а так же текст, с которым будет сравниватся текст в элементе
text_to_be_present_in_element_value(('xpath', "//input[@type='text']"), "Hi"))
Для удобства, метод поиска и локатор веб-элемента можно записывать в отдельную переменную - VISIBLE_AFTER_BUTTON = ('xpath', "//button[@id='visibleAfter']")
wait.until(expected_conditions.visibility_of_element_located(VISIBLE_AFTER_BUTTON)) # С использованием переменной
wait.until(expected_conditions.visibility_of_element_located(('xpath', "//button[@id='visibleAfter']"))) # Вернет веб-элемент, если найдет его
visible_after_button = wait.until(expected_conditions.visibility_of_element_located(VISIBLE_AFTER_BUTTON))
visible_after_button.click()
