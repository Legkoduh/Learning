Система контроля версий (VCS)
Хранит всю историю изменений, которые вносились в проект
Позволяет вернуться к предыдущим версиям приложения/проекта
Branch (ветка) среда разработки кода
Master branch - главная ветка, в которой храниться эталонная/прод. версия кода
Другие ветки (dev1, dev2, test) - позволяют вести в них разработку, тестирование
Репозиторий - место хранения веток
Репозиториев бывает несколько: 1 для хранения веб версии, 2 для мобильной версии и тд
git - распределенная система контроля версий - позволяет скопировать репозиторий на свой компьютер и работать с ним локально
В случае возникновения проблем с главным репозиторием - можно скопировать локальный со стабильной версией кода

После установки git, для проверки успешности инсталяции - вызвать cmd и напечатать в ней git
Затем необходимо создать Конфиг файл, для этого в cmd - copy NUL .gitconfig
Проверяем, что по указаному пути создан файл gitconfig
Добавляем в этот файл информацию про ник и имейл и сохраняем ее:
[user]
    email=legkoduh.dp@gmail.com
    user=Kiril
Эти данные будут передаваться в репозиторий, когда в него будут вноситься изменения
Благодаря этому, можно увидеть, кто и когда вносил в него изменения
Проверить добавление параметров пользователя можно прописал в cmd: git config --list --global

git - построен по принцыпу клиент-серверной архитектуры
Клиент - это git установленный на локальном ПК, а сервер - внутренний репозиторий компании или github, gitlab

После создания репозитория, для удаленной работы с ним, необходима ссылка на него, она находится в дроп-даун "Code" (HTTPS/SSH or GitHub CLI)
Для копирования репозитория на локальный ПК, в cmd пишем - git clone https://github.com/Legkoduh/masterRepo.git (ссылка на нужный репозиторий)
Далее добавляем файл в папку с локальным репозиторием и проверяем статус - git status
Показывается список файлов, которые еще не отслеживаются git-ом
Для отслеживания файла системой контроля версий, в сmd, используется команда - git add File1.txt (название нужного файла)
Для проверки успешности добавления файла в VCS - git status. Показывается список добавленных для отслеживания файлов
Статус файла изменился с untracked в new file
После добавления изменений в файл и проверки статуса - у файла 2 статуса: new file и modified
Мы можем откатиться к предыдущей версии файла, до изменений - git restore js.txt
Или добавим эти изменений - git add js.txt
git status - у файла 1 статус - New file
Для сохранения всех изменений - git commit -m 'Message about changes in this commit'
git status - nothing to commit
Для добавления файла в удаленный репозиторий - git push
Открывается страница авторизации github, после успешного логина - все изменений (новые файлы, изменений в файлах) добавлены в удаленный репозиторий

bash commands:
cat js.txt (file name) - вывести содержимое файла в bash console

git на локальном ПК не знает об изменениях в удаленном репозитории, что бы их обнаружить используется команда - git fetch
Показывает на сколько коммитов локальная ветка отстает от удаленного
master -> origin/master
master - ветка в локальном репозитории
origin master - ветка на удаленном репозитории
origin/master - локальная, но нерабочая версия ветки master
Это промежуточная ветка, информация в которой, соответствует origin репозиторию на момент последнего запуска команды git fetch
При запуске команды git fetch ветка не изменяется
Что бы пришли изменения с удаленного репозитория на локальный необходимо использовать команду git pull
Updating 6629828..cabf76a
6629828..cabf76a - хэш коммита - уникальный идентификатор/номер, который присваиваеться каждому коммиту
git log - выводит список всех коммитов, который включает: хэш коммита, автора, дату, имя файла и комментарий к коммиту
q - закрыть git log и продолжить работу с bash console
Список изменений конкретного автора - git log --author Kiril
Просмотреть конкретный коммит - git show b2553d263a45296812a364151f3ae8af41340313 (хэш коммита)
Просмотреть последний коммит - git show
Узнать автора строки в файле - git blame js.txt (file name)
Узнать кто добавил конкретную строку в файл - git blame File1.txt | grep 789 (нужная строка)
Узнать вносил ли изменения конкретный автор - git blame File1.txt | grep Kiril
touch - добавить новый файл
Добавить новую строку в файл - echo "Add new line" >> File1.txt (file name)
Добавить новый файл и строку в него - echo "First line in the new file" >> NewFile1.txt (name of the file)
Если файла с таким названием и расширением не существует - он будет создан и в него будет добавлена строка "First line in the new file"
Просмотреть различие локального и удаленного файлов - git diff
git diff (document_name) git diff js.txt
Команды git на локальном ПК выводят последнюю информацию именно с локальной машины, актуальные данные будут выводится после успешного git pull
Файлы в статусе modified могут быть добавлены в коммит без команды git add, а для файлов со статусом Untracked - это обязательно

git add - добавить изменения (новый файл, изменения в файлах) в коммит
git commit -a -m "Message" - применить все изменения (-a - add ???, -m - message). Параметры a и m можно обьединять (-am)
git fetch - сравнить локальную и удаленную ветки на наличие расхождений/изменений/несоответствий, проверить отличия локального репозитория от удаленного
git pull - обновление локальной ветки до актуальной/последней версии, синхронизация локальной и удаленной веток
git reset HEAD~1 - вернуть состояние на 1 коммит назад (параметр hard - безвозвратно удаляет изменения в коммите)
В случае возникновения конфликта, который пока нельзя решить (изменения в одном и том же файле в удаленном и локальном репозиториях),
можно отменить последний мерж - git merge --abort
git указывает в файле (локальном и все ?), который является причиной конфликта, конкретное место возникновения конфликта
<<<<<<< HEAD
Lines of code
==========
Lines of enother code
>>>>>>> d56b6818beb413d0571a7c681924d40c10855678 (hash of the commit)
После решения конфликта на локальной машине: git add (file name), git commit -am "Message", git push
git checkout (file name) - отменить изменения в файле (like git restore ?)
git checkout . - отменить изменения во всех файлах
git stash - переместить изменения во временное хранилище, временно удалить изменения
git stash pop - вернуть изменения из временного хранилища
git stash clear - удалить временное хранилище

------------------------- Работа с ветками -------------------------
master branch - история изменений проекта
commit - изменения проекта
git branch - просмотр списка веток в локальном репозитории
git branch -r - просмотр списка веток в удаленном репозитории
git branch -a - просмотр списка всех веток в локальном и удаленном репозиториях
git branch first_branch (name of the branch) - создать новую ветку
git branch -b first_branch (name of the branch) - создать новую ветку и сразу же переключится на нее
Новая ветка соответствует master ветке в репозитории (содержит все файлы и их наполнение), на момент последнего коммита
Звездочкой (*) отмечена текущая ветка, в которой, в данный момент идет работа (*main)
git checkout first_branch (branch name) - переключится в ветку first_branch
git checkout - - перейти в предыдущую ветку (на 1 шаг назад)
Если пушить изменения в репозиторий, в котором еще нет новой, созданной на локальной машине ветки - возникает ошибка
git push -u origin first_branch (name of the local branch) - создать новую локальную ветку в удаленном репозитории и связать их

git remote add origin https://github.com/твой_ник/имя_репозитория.git - связать локальный репозиторий с удалённым
origin — это имя удалённого репозитория (может быть любое, но по умолчанию обычно origin)
URL — адрес репозитория на GitHub
git push -u origin main
-u — устанавливает ветку main как upstream (будет пушить/тянуть по умолчанию)
origin — имя удалённого репозитория
main — имя ветки (раньше часто была master, сейчас чаще main)

Для мерджа необходимо переключится в ту ветку, в которую нужно сделать мердж
git merge new_branch (name of the branch) - мердж new_branch ветки в актуальную, где сейчас находитесь, ветку
Мерж new_branch ветки в best_branch ветку:
git checkout best_branch
git merge new_branch
git push
Мерж был произведен в локальном репозитории, а для мержа в удаленном - необходимо провести git push
merge - слияние 2-х веток (удаленной master с локальной dev)
Мердж ветки в мастер ветку отображается коммитом
Изменения будут добавлены в ту ветку, из которой делается коммит и пуш
(изменения в branch1, переключение на branch2, коммит и пуш - изменения добавленны в branch2 ветку в удаленном репозитории)
Изменения в 1 ветке будут применены во всех, до того как в нужной ветке будет выполнен коммит*
*можливо я просто не переключився в main гілку, бо гіт не дає це зробити, якщо були зміни у файлах і вони ще не закомічені

Изменение названия пустой ветки:
git branch -m first_name second_name - изменить название ветки first_name на second_name
Изменение названия ветки с файлами:
git branch -m first_name second_name - название не меняется в удаленном репозитории
git push origin :first_name - удаляем старую ветку в удаленном репозитории
// - [deleted]         firstname_changed
git push -u origin second_name - создаем эту ветку с новым названием (second_name)
Названия ветки во время переименования и пуша должны совпадать
Если не указать -u, то не будет создана upstream ветка и при попытке пуша - возникает ошибка
fatal: The current branch Check2 has no upstream branch.
To push the current branch and set the remote as upstream, use git push --set-upstream origin Check2 (or git push -u origin Check2)
Upstream branch - это локальная ветка, ветка слежения, которая на прямую связана с удаленной
При клонировании репозитория, как правило, автоматически создаётся ветка master, которая следит за origin/master
При создании новой локальной ветки, upstream ветка не создается автоматически и ее нужно создавать самому ?
При клонировании репозитория, автоматически создаются локальные upstream ветки для всех веток в репозитории ?
Так же, после переименования локальной ветки (branch1 to branch2), можно ее создать в удаленном репозитории:
fatal: The upstream branch of your current branch does not match the name of your current branch.
To push to the upstream branch on the remote, use git push origin HEAD:branch1 - изменения из ветки branch2 применяются в ветку branch1 в удаленном репозитории
To push to the branch of the same name on the remote, use git push origin HEAD - создается ветка с новым названием в удаленном репозитории

Удаление локальной ветки:
git branch -d second_name
//Deleted branch second_name (was 419422b).
Вернуть удаленную локальную ветку:
git fetch origin second_name (без :)
//[new ref]                    -> second_name
Но ее еще нет в списке git branch
Что бы она там отображалась - нужно перейти в нее - git checkout second_name
//branch 'second_name' set up to track 'origin/second_name'.
Удаление ветки с удаленного репозитория
git push origin :second_name (branch name)
git push -u origin :second_name (branch name) ???
Удалить файл из ветки: (сначала локальной, а затем используя commit и push - удаленной)
1.) При помощи команды git rm
git rm ConflictFile.txt (file name) - данная команда сама запустит git add (файл должен быть в удаленном и локальном репозиториях)
git commit -m "File name deleted"
git push
2.) Используя проводник OS ПК
Удалить нужные файлы через проводник
git add
git commit -m "File name deleted"
git push
https://ru.stackoverflow.com/questions/622709/%D0%9A%D0%B0%D0%BA-%D1%83%D0%B4%D0%B0%D0%BB%D0%B8%D1%82%D1%8C-%D1%8D%D0%BB%D0%B5%D0%BC%D0%B5%D0%BD%D1%82-%D0%B8%D0%B7-master-%D0%B2%D0%B5%D1%82%D0%BA%D0%B8-%D1%80%D0%B5%D0%BF%D0%BE%D0%B7%D0%B8%D1%82%D0%BE%D1%80%D0%B8%D1%8F

git fetch origin : (with :) any name - creates a new local branch (copy of master) ?
git push origin (: - optional) branch_name - ?

Конфликт 1 - в удаленный репозиторий добавлены файлы, которых нет в локальном
git pull

Конфликт 2 - строка в файле отличается в удаленном и локальном репозиторииях
git pull
Edit this file manually, leave the code what is necessary and save
git add (name of the file with manual fix)
git commit -am "Message"
git push

------------------------- git GUI -------------------------
git GUI & - launch git GUI
gitk & - the history of all actions with the repository (Visualize master's history)


Use case:
Загрузить репозиторий на локальную машину - git clone (url of the repository)
Добавить все изменения в VCS - git add (name of the file with extension)
Сохранить все измнения - git commit -m 'Message about sense of the commit'
Отправить изменения с локальной машины в удаленный репозиторий - git push (and then - pass the verification with valid data)

echo > main.py - add a new File using the Terminal
